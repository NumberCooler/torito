(function(){
    
	return function(req,res){ 
	    var body = [];
        req.on('data', function (data) {
            body.push(data);
            // Too much POST data, kill the connection!
            // 1e6 === 1 * Math.pow(10, 6) === 1 * 1000000 ~~~ 1MB
            if (body.join("").length > 1e6) req.connection.destroy();
        });
        req.on('end', function () {
            var qs = require('querystring');
            var post = qs.parse(body.join(""));
            if("action" in post) {
                if(post.action == "install") {
                    if("path" in post && "code" in post) {
                        try {
                            var data = global.codecs.hex2str( post.code );
                            var method = "get";
                            if("method" in post && post.method == "post") method = "post";
                            if("method" in post && post.method == "static") method = "static";

                            // disable params
                            /*
                            var _parts = post.path.split("/");
                            for(var x = 0; x < _parts.length;x++) {
                                if(_parts[x].indexOf(":")!=-1) {
                                    throw new Error("cant use params yet.")
                                }
                            }
                            */
                            // remove old routes
                            var routes = [];
                            for(var item in app._router.stack) {
                                var i = app._router.stack[item];
                                if(i.route) {
                                    if(i.route.path && i.route.path == post.path && i.route.methods[method]) {
                                        routes.push(i);
                                    }
                                } else {
                                    var path = i.regexp.toString().substring(3);
                                    var end2 = "\\/?(?=\\/|$)/i";
                                    if(path.substring(path.length-end2.length) == end2 && i.name=="serveStatic") {
                                    path = path.substring(0,path.length-end2.length);
                                        if(path == post.path) {
                                            routes.push(i);
                                        }
                                    }
                                }
                            }
                            for(var r in routes) {
                                var id = app._router.stack.indexOf(routes[r]);
                                app._router.stack.splice(id,1);
                            }
                            var _path = post.path.split("/");
                            if(_path.length>2) {
                                for(var x = 1; x < _path.length-1;x++) {
                                    if(_path[x] == ".") {
                                        throw new Error("can't use relative to create route.");
                                    }
                                    if(_path[x] == "..") {
                                        throw new Error("can't use relative to create route.");
                                    }
                                    if(_path[x].indexOf(":")!=-1) {
                                        _path[x] = "__param__" + escape(_path[x]);
                                    }
                                    if(!global.fs.existsSync(_path[x])) {

                                        var filename2 = [];
                                        for(var y = 0; y <= x;y++) {
                                            filename2.push(_path[y]);
                                        }
                                        filename2 = filename2.join("/");
                                        console.log(filename2);
                                        global.fs.mkdirSync("./meta/javascript/server/routes/" +method+"/" + filename2);
                                    }
                                }
                            }
                            if(method != "static") {
                                eval("builtin."+method+"[post.path] = " + data);
                            } else {
                                data = JSON.parse(data);
                                builtin.static[post.path] = data;
                            }
                            if(method == "static") {
                                var i = builtin.static[post.path];
                                app.use(i.path,global.express.static(i.target));
                                
                                global.fs.writeFileSync("./meta/javascript/server/routes/"+method+"/" + post.path + ".json",JSON.stringify(data),"utf8");
                            } else {
                                var _path = post.path.split("/");
                                for(var x = 0; x < _path.length;x++) {
                                    if(_path[x].indexOf(":")!=-1) {
                                        _path[x] = "__param__" + escape(_path[x]);
                                    }
                                }
                                _path = _path.join("/");
                                console.log("???",_path);
                                app[method](post.path,builtin[method][post.path]);
                                console.log("OK",_path);
                                global.fs.writeFileSync("./meta/javascript/server/routes/"+method+"/" + _path + ".jsf",data,"utf8");
                            }

                            

                            res.send(JSON.stringify({result:true}));
                        } catch(e) {
                            console.log(e);
                            console.log(e.stack);
                            res.send(JSON.stringify({result:false,msg:""+e+e.stack}));
                        }
                    }
                } else if(post.action == "remove") {
                    if("path" in post) {
                        try {
                            var method = "get";
                            if("method" in post && post.method == "post") method = "post";
                            if("method" in post && post.method == "static") method = "static";
                            var routes = [];
                            for(var item in app._router.stack) {
                                var i = app._router.stack[item];
                                if(i.route) {
                                    if(i.route.path && i.route.path == post.path && i.route.methods[method]) {
                                        routes.push(i);
                                    }
                                } else {
                                    var path = i.regexp.toString().substring(3);
                                    var end2 = "\\/?(?=\\/|$)/i";
                                    if(path.substring(path.length-end2.length) == end2 && i.name=="serveStatic") {
                                        path = path.substring(0,path.length-end2.length);
                                        if(path == post.path) {
                                            routes.push(i);
                                        }
                                    }
                                }
                            }
                            for(var r in routes) {
                                var id = app._router.stack.indexOf(routes[r]);
                                app._router.stack.splice(id,1);
                                console.log("deleted route");
                            }
                            if(method == "static") {
                                global.fs.unlinkSync("./meta/javascript/server/routes/static/" + post.path + ".json",data,"utf8");
                            } else {
                                var _path = post.path.split("/");
                                for(var x = 0; x < _path.length;x++) {
                                    if(_path[x].indexOf(":")!=-1) {
                                        _path[x] = "__param__" + escape(_path[x]);
                                    }
                                }
                                _path = _path.join("/");
                                global.fs.unlinkSync("./meta/javascript/server/routes/"+method+"/" + _path + ".jsf",data,"utf8");
                            }
                            res.send(JSON.stringify({result:true}));
                        } catch(e) {
                            console.log(e);
                            console.log(e.stack);
                            res.send(JSON.stringify({result:false}));
                        }
                    }
                } else if(post.action == "list") {
                    try {
                        var ms = { get : {}, post : {}, static :{} };
                        for(var item in app._router.stack) {
                            var i = app._router.stack[item];
                            if(i.route) {
                                if(i.route.path && i.route.methods) {
                                    for(var m in i.route.methods) {
                                        if(m in ms && m in builtin) {
                                            var _path = i.route.path;
                                            _path = _path.split("/");
                                            for(var x = 0; x < _path.length;x++) {
                                                if(_path[x].indexOf(":")!=-1) {
                                                    _path[x] = "__param__" + escape(_path[x]);
                                                }
                                            }
                                            _path = _path.join("/");
                                            var code = global.fs.readFileSync("./meta/javascript/server/routes/"+m+"/" + _path + ".jsf","utf8");
                                            ms[m][i.route.path] = code;
                                        }
                                    }
                                }
                            } else {
                                var path = i.regexp.toString().substring(3);
                                var end2 = "\\/?(?=\\/|$)/i";
                                if(path.substring(path.length-end2.length) == end2 && i.name=="serveStatic") {
                                    path = path.substring(0,path.length-end2.length);
                                    var code = global.fs.readFileSync("./meta/javascript/server/routes/static/"+path + ".json","utf8");
                                    console.log("??",path,code);
                                    ms["static"][ path ] = code;
                                }
                            }
                        }
                    } catch(e) {
                        console.log(e);
                        console.log(e.stack);
                    }
                    res.send( JSON.stringify(ms) );
                }
            } else {
                if(req.session.logged) {
                    res.send( global.fs.readFileSync("./meta/javascript/client/torito/index.html","utf8") );
                    res.end();
                    return;
                } else {
                    res.send( global.fs.readFileSync("./assets/page/torito/login.html","utf8") );
                    res.end();
                    return;
                }
            }
            
        });
    };

})();