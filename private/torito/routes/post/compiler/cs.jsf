(function() {
    return function (req,res) {
        var body = [];
        req.on('data', function (data) {
            body.push(data);
            // Too much POST data, kill the connection!
            // 1e6 === 1 * Math.pow(10, 6) === 1 * 1000000 ~~~ 1MB
            if (body.join("").length > 1e5) req.connection.destroy();
        });
        req.on('end', function () {
            var qs = require('querystring');
            var post = qs.parse(body.join(""));

            if(!(req.session.logged && req.session.level == 0)) {
                res.send(JSON.stringify({result:false,msg:"not logged."}));
                res.end();
                return;
            }

            if(!("data" in post)) {
                res.json({result:false});
            }
            if(!("type" in post)) {
                res.json({result:false});
            }
            var tmp_folder = __dirname + "/private/torito/tmp";
            var _path = require("path");
            tmp_folder = _path.normalize( tmp_folder );
            if(!mod.fs.existsSync(tmp_folder)) {
                mod.fs.mkdirSync(tmp_folder);
            }
            var spawn = require('child_process').spawn;
            var doc = mod.codecs.hex2str( post.data );
            console.log(doc);
            mod.fs.writeFileSync(tmp_folder + "/test.cs",doc,"utf8");

            var cargs = [
                "/t:" + post.type,
                "/nologo"
            ]
            if(doc.indexOf("System.Numerics")!=-1) {
                cargs.push("/r:System.Numerics.dll");
            }
            if(doc.indexOf("System.Drawing")!=-1) {
                cargs.push("/r:System.Drawing.dll");
            }
            if(doc.indexOf("System.Windows.Forms")!=-1) {
                cargs.push("/r:System.Windows.Forms.dll");
            }
            if(doc.indexOf("System.Configuration.Install")!=-1) {
                cargs.push("/r:System.Configuration.Install.dll");
            }
            if(doc.indexOf("System.ServiceProcess")!=-1) {
                cargs.push("/r:System.ServiceProcess.dll");
            }
            
            if(
                doc.indexOf("System.IO")!=-1 || 
                doc.indexOf("System.Threading")!=-1 || 
                doc.indexOf("System.Text")!=-1 || 
                doc.indexOf("System.Collections")!=-1 ||
                doc.indexOf("System.Reflection")!=-1 ||
                doc.indexOf("Microsoft.Win32")!=-1 ||
                doc.indexOf("System.Runtime.InteropServices") !=-1
            ) {
                cargs.push("/r:mscorlib.dll");
            }
            if(
                doc.indexOf("System.Diagnostics")!=-1 ||
                doc.indexOf("Microsoft.Win32")!=-1 ||
                doc.indexOf("System.ComponentModel")!=-1
            ) {
                cargs.push("/r:System.dll");
            }


            cargs.push("/out:" + tmp_folder + "/test.exe");
            cargs.push(tmp_folder + "\\test.cs");
            

            console.log(JSON.stringify(cargs));
            var cs_compiler = 'C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe';
            var child = spawn(cs_compiler, cargs);
            var data = [];
            child.stdout.on('data', function(chunk) {
                data.push(chunk);
            });
            child.on('exit', (code) => {
                if(code == 0) {
                    var state = 0;
                    var timeout = setTimeout(function() {
                        if(state != 1) {
                            console.log("WAITING");
                            state = 2;
                            // generate id to look for archived results
                            res.json({result:true,wait:true});
                        }
                    },1000);
                    var child2 = spawn(tmp_folder + '/test', []);
                    var data2 = [];
                    child2.stdout.on('data', function(chunk) {
                        data2.push(chunk);
                    });
                    child2.on('exit', (code) => {
                        mod.fs.unlinkSync(tmp_folder + "/test.cs");
                        if(state == 2) {
                            console.log("WRITING RESULT");
                            // already sent response, so archive result with id
                            mod.fs.writeFileSync(tmp_folder + "/test.txt", data2.join(""), "utf8");
                            return;
                        } else {
                            state = 1;
                            res.json({result:true,msg:data2.join("")});
                            return;
                        }
                    });
                } else {
                    res.json({result:false,code:code,msg:data.join("")});
                    return;
                }
            });

        });
    };
})();