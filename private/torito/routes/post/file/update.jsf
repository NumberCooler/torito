(function() {
    return function (req,res) {
        if (req.method == 'POST') {
            var body = [];
            req.on('data', function (data) {
                if(!(req.session.logged)) {
                    req.connection.destroy();
                    return;
                }
                body.push(data);
                // Too much POST data, kill the connection!
                // 1e6 === 1 * Math.pow(10, 6) === 1 * 1000000 ~~~ 1MB
                if (body.join("").length > 1e8) req.connection.destroy();
            });
            req.on('end', function () {
                var qs = require('querystring');
                var post = qs.parse(body.join(""));
                // use post['blah'], etc.
                if(!(req.session.logged && req.session.level == 0)) {
                    res.send(JSON.stringify({result:false,msg:"not logged.(2)"}));
                    return;
                }
                if(!("file" in post && "data" in post)) {
                    res.send(JSON.stringify({result:false,msg:"incorrect params."}));
                    return;
                }
                if( post.file == ".") {
                    res.send(JSON.stringify({result:false,msg:"incorrect params."}));
                    return;
                }

                var arr = post.file;
                // check if can remove file
                var check = true;
                var msg = "fail";
                if(arr.indexOf("./")==0) {
                    var meta = mod.torito.paths.server.meta.file + "/" + arr.substring(2);
                    if(mod.fs.existsSync(meta)) {
                        try {
                            var json = JSON.parse(mod.fs.readFileSync(meta,"utf8"));
                            if( json.canChange === false ) {
                                check = false;
                                msg = "file is protected.";
                            } else {
                                if(!("history" in json)) {
                                    json.history = [];
                                }
                                json.history.push( {
                                    date : new Date(),
                                    data : mod.fs.readFileSync(post.file,"utf8") 
                                });
                                mod.fs.writeFileSync(meta,JSON.stringify(json),"utf8");
                            }
                        } catch(e) {
                            console.log(e);
                        }
                    }
                } else {
                    //var msg = post.file + " is unkown!";
                    //throw msg;
                    res.json({result:false});
                    return;
                }
                if(check) {

                    var parts = arr.split("/");
                    var current_path = ".";
                    for(var x = 1; x < parts.length;x++) {
                        var link_file = current_path + "/" + parts[x] + ".link";
                        if( mod.fs.existsSync( link_file ) ) {
                            var json = JSON.parse( mod.fs.readFileSync( link_file, "utf8" ) );
                            if("path" in json) {
                                current_path = json.path;
                            } else {
                                res.json({result:false});
                                return;
                            }
                        } else {
                            current_path += "/" + parts[x];
                        }
                
                        if(x == parts.length-1) {
                            var filename2 = current_path;
                            var data = mod.codecs.hex2str( post.data );
                            if(mod.fs.lstatSync(filename2).isFile()) {
                                mod.fs.writeFileSync(filename2,data,"binary");
                            }
                            res.json({result:true, file:filename2});
                            return;
                        }
                    }

                } else {
                    res.json({result:false,msg:msg});
                    return;
                }
               
            });
        }
        
    }
})();