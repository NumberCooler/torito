(function() {
    return function (req,res) {
        

        var body = [];
        req.on('data', function (data) {
            body.push(data);
            // Too much POST data, kill the connection!
            // 1e6 === 1 * Math.pow(10, 6) === 1 * 1000000 ~~~ 1MB
            if (body.join("").length > 1e2) req.connection.destroy();
        });
        req.on('end', function () {
            var qs = require('querystring');
            var post = qs.parse(body.join(""));
            
            if(!(req.session.logged && req.session.level == 0)) {
                res.send(JSON.stringify({result:false,msg:"not logged."}));
                res.end();
                console.log("not logged");
                return;
            }

            if(!("dir" in post)) {
                res.send(JSON.stringify({result:false,msg:"no directory."}));
                console.log("no directory")
                res.end();
                return;
            }
            // check if userA is not getting access to userB, except if userB allows
            console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");

            try {
                var ret = {};
                var dir = escape(post.dir);
                // if(dir == ".") dir = "./";
                var parts = dir.split("/");
                var current_path = ".";
                var virtual_path = [];
                
                if(dir.indexOf("./")==0 || dir == ".") {
                    for(var x = 1; x < parts.length;x++) {
                        // check if there is ".link" file
                        
                        var link_file = current_path + "/" + parts[x] + ".link";
                        if( mod.fs.existsSync( link_file ) ) {
                            // check if link file is allowed by admin
                            console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");

                            var json = JSON.parse( mod.fs.readFileSync( link_file, "utf8" ) );
                            if("path" in json) {
                                current_path = json.path;
                            } else {
                                throw "not handled2";
                            }
                        } else {
                            current_path += "/" + parts[x];
                        }
                        if(x == parts.length-1) {
                            if( mod.fs.lstatSync(current_path).isDirectory() ) {

                                var arr = mod.fs.readdirSync(unescape(current_path));
                                var vp = parts.join("/") + "/";
                                for(var file in arr) {
                                    try {
                                        if( mod.fs.lstatSync(unescape(current_path) + "/" + arr[file]).isDirectory() ) {
                                        
                                            ret[vp + arr[file]] = 0;
                                        } else {
                                            ret[vp + arr[file]] = 1;
                                        }
                                    } catch(e) {
                                    }
                                }
                            } else {
                                res.json({result : false});
                                res.end();
                                return;
                            }
                        }
                    }
                    if(parts.length == 1) { // enforce .
                        arr = mod.fs.readdirSync(".");
                        for(var file in arr) {
                            try {
                                if( mod.fs.lstatSync(arr[file]).isDirectory() ) {
                                    ret["./" +arr[file]] = 0;
                                } else {
                                    ret["./" +arr[file]] = 1;
                                }
                            } catch(e) {
                            }
                        }
                    }
                    res.send(JSON.stringify({
                        result : true,
                        value : ret
                    }));
                    res.end();
                    return;
                } else {
                    
                    res.send(JSON.stringify({result : false, message: " path " + dir + " do not starts with ./ " }));
                    res.end();
                    return;
                }
            } catch(e) {
                console.log(e);
                console.log(e.stack);
                res.send(JSON.stringify({result : false}));
                res.end();
                return;
            }
        });
    }
})();