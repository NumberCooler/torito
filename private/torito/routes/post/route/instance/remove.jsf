(function(){
    
	return function(req,res){ 
	    var body = [];
        req.on('data', function (data) {
            if(!(req.session.logged)) {
                res.send(JSON.stringify({result:false,msg:"not logged."}));
                req.connection.destroy();
                return;
            }
            body.push(data);
            // Too much POST data, kill the connection!
            // 1e6 === 1 * Math.pow(10, 6) === 1 * 1000000 ~~~ 1MB
            if (body.join("").length > 1e2) req.connection.destroy();
        });
        req.on('end', function () {
            var qs = require('querystring');
            var post = qs.parse(body.join(""));

            if(!("path" in post) || !("method" in post) || !("index" in post)) {
                res.json({result:false,msg:"missing params."});
                return;
            }
            try {
                post.index = parseInt(post.index);
            } catch(e) {
                res.json({result:false});
                return;
            }

            var path = "./private/torito/routesMeta";
            if(!(mod.fs.existsSync(path))) {
                mod.fs.mkdirSync(path);
            }
            path += "/instances";
            if(!(mod.fs.existsSync(path))) {
                mod.fs.mkdirSync(path);
            }

            // check if method is ok
            if( post.method != "post" && post.method != "get") {
                res.json({result:false});
                return;
            }
            // check if path is ok
            if(post.path.indexOf("..")!=-1) {
                res.json({result:false});
                return;
            }
            
            if(!(mod.fs.existsSync("./private/torito/routes/" + post.method + post.path + ".jsf"))) {
                res.json({result:false, msg:"incorrect path (2)." + "./private/torito/routes/" + post.method + post.path });
                return;
            }
            
            path += "/" + post.method + post.path + ".requests.json";

            if(mod.fs.existsSync(path)) {
                try { 
                    data = JSON.parse( mod.fs.readFileSync(path,"utf8") );
                } catch(e) {
                    res.json({result:false});
                    return;
                }
            }
            if(post.index < 0 || post.index >= data.requests.length) {
                res.json({result:false});
                return;
            }
            data.requests[post.index].removed = true;
            mod.fs.writeFileSync(path,JSON.stringify(data),"utf8");
            res.json({result:true});
            
            return;
        });

    };
})();